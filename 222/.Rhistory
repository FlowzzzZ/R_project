selectInput(inputId = 'selected',label = 'Route or Loc',
choices = c('Loc','Route'),selected = 'Loc',
multiple = F),
textOutput(outputId = 'Request'),
submitButton(text = "Submit")
)
))
server <- shinyServer(function(input, output) {
## acquire the coordinate from rjson file
getcoord <- function(x){## x is a name of some place
x <- fromJSON(getCoordinate(x))
return(x)
}
## output leaflet map to the id:map
output$map <- renderLeaflet({
m <- leaflet()
m <- m%>%addTiles()
if(input$selected == 'Loc'){
temp <- getcoord(input$Loc)
if(temp$status!=0){
output$Request <- renderText({
c('The location failed to be found')
})
m
}else{
output$Request <- renderText({
c('The location is found successfully')
})
m %>% addMarkers(lng=temp$result$location$lng,
lat=temp$result$location$lat,
popup = paste0(input$Loc,'--',temp$result$level))
}
}else{
temp1 <- getcoord(input$Start)
temp2 <- getcoord(input$End)
if(temp1$status==0&temp2$status==0){
output$Request <- renderText({
c('Both start point and end point are valid')
})
route <- getRoute(input$Start,input$End)
m%>%addPolylines(route$lon,route$lat)%>%
addMarkers(lng=route$lon[c(1,nrow(route))],
lat=route$lat[c(1,nrow(route))],
popup = c(paste0(input$Start,'--',temp1$result$level),
paste0(input$End,'--',temp2$result$level)))
}else{
output$Request <- renderText({
c('One or both of origin and destination is invalid')
})
}
}
})
})
library(baidumap)
library(shiny)
library(leaflet)
library(baidumap)
library(rjson)
ui <- shinyUI(fluidPage(
## the area for title
headerPanel(title = 'Simulated BaiduMap'),
## plot the leaflet in the whole page
leafletOutput(outputId = 'map',width = '1920px',height = '1080px'),
## control inputs panel and button
absolutePanel(width = 430,top=200,left = 'auto',draggable = T,
textInput(inputId = 'Loc',label = 'THE PLACE'),
textInput(inputId = 'Start',label = 'FROM',width = "50%"),
textInput(inputId = 'End',label = 'TO',width = "50%"),
selectInput(inputId = 'selected',label = 'Route or Loc',
choices = c('Loc','Route'),selected = 'Loc',
multiple = F),
textOutput(outputId = 'Request'),
submitButton(text = "Submit")
)
))
server <- shinyServer(function(input, output) {
## acquire the coordinate from rjson file
getcoord <- function(x){## x is a name of some place
x <- fromJSON(getCoordinate(x))
return(x)
}
## output leaflet map to the id:map
output$map <- renderLeaflet({
m <- leaflet()
m <- m%>%addTiles()
if(input$selected == 'Loc'){
temp <- getcoord(input$Loc)
if(temp$status!=0){
output$Request <- renderText({
c('The location failed to be found')
})
m
}else{
output$Request <- renderText({
c('The location is found successfully')
})
m %>% addMarkers(lng=temp$result$location$lng,
lat=temp$result$location$lat,
popup = paste0(input$Loc,'--',temp$result$level))
}
}else{
temp1 <- getcoord(input$Start)
temp2 <- getcoord(input$End)
if(temp1$status==0&temp2$status==0){
output$Request <- renderText({
c('Both start point and end point are valid')
})
route <- getRoute(input$Start,input$End)
m%>%addPolylines(route$lon,route$lat)%>%
addMarkers(lng=route$lon[c(1,nrow(route))],
lat=route$lat[c(1,nrow(route))],
popup = c(paste0(input$Start,'--',temp1$result$level),
paste0(input$End,'--',temp2$result$level)))
}else{
output$Request <- renderText({
c('One or both of origin and destination is invalid')
})
}
}
})
})
options(baidumap.key = 'pzsxVTAgQsSAXfolToTgqpdUebRTgZib 	')
library(shiny)
library(leaflet)
library(baidumap)
library(rjson)
ui <- shinyUI(fluidPage(
## the area for title
headerPanel(title = 'Simulated BaiduMap'),
## plot the leaflet in the whole page
leafletOutput(outputId = 'map',width = '1920px',height = '1080px'),
## control inputs panel and button
absolutePanel(width = 430,top=200,left = 'auto',draggable = T,
textInput(inputId = 'Loc',label = 'THE PLACE'),
textInput(inputId = 'Start',label = 'FROM',width = "50%"),
textInput(inputId = 'End',label = 'TO',width = "50%"),
selectInput(inputId = 'selected',label = 'Route or Loc',
choices = c('Loc','Route'),selected = 'Loc',
multiple = F),
textOutput(outputId = 'Request'),
submitButton(text = "Submit")
)
))
server <- shinyServer(function(input, output) {
## acquire the coordinate from rjson file
getcoord <- function(x){## x is a name of some place
x <- fromJSON(getCoordinate(x))
return(x)
}
## output leaflet map to the id:map
output$map <- renderLeaflet({
m <- leaflet()
m <- m%>%addTiles()
if(input$selected == 'Loc'){
temp <- getcoord(input$Loc)
if(temp$status!=0){
output$Request <- renderText({
c('The location failed to be found')
})
m
}else{
output$Request <- renderText({
c('The location is found successfully')
})
m %>% addMarkers(lng=temp$result$location$lng,
lat=temp$result$location$lat,
popup = paste0(input$Loc,'--',temp$result$level))
}
}else{
temp1 <- getcoord(input$Start)
temp2 <- getcoord(input$End)
if(temp1$status==0&temp2$status==0){
output$Request <- renderText({
c('Both start point and end point are valid')
})
route <- getRoute(input$Start,input$End)
m%>%addPolylines(route$lon,route$lat)%>%
addMarkers(lng=route$lon[c(1,nrow(route))],
lat=route$lat[c(1,nrow(route))],
popup = c(paste0(input$Start,'--',temp1$result$level),
paste0(input$End,'--',temp2$result$level)))
}else{
output$Request <- renderText({
c('One or both of origin and destination is invalid')
})
}
}
})
})
options(baidumap.key = 'pzsxVTAgQsSAXfolToTgqpdUebRTgZib 	')
library(shiny)
library(leaflet)
library(baidumap)
library(rjson)
ui <- shinyUI(fluidPage(
## the area for title
headerPanel(title = 'Simulated BaiduMap'),
## plot the leaflet in the whole page
leafletOutput(outputId = 'map',width = '1920px',height = '1080px'),
## control inputs panel and button
absolutePanel(width = 430,top=200,left = 'auto',draggable = T,
textInput(inputId = 'Loc',label = 'THE PLACE'),
textInput(inputId = 'Start',label = 'FROM',width = "50%"),
textInput(inputId = 'End',label = 'TO',width = "50%"),
selectInput(inputId = 'selected',label = 'Route or Loc',
choices = c('Loc','Route'),selected = 'Loc',
multiple = F),
textOutput(outputId = 'Request'),
submitButton(text = "Submit")
)
))
server <- shinyServer(function(input, output) {
## acquire the coordinate from rjson file
getcoord <- function(x){## x is a name of some place
x <- fromJSON(getCoordinate(x))
return(x)
}
## output leaflet map to the id:map
output$map <- renderLeaflet({
m <- leaflet()
m <- m%>%addTiles()
if(input$selected == 'Loc'){
temp <- getcoord(input$Loc)
if(temp$status!=0){
output$Request <- renderText({
c('The location failed to be found')
})
m
}else{
output$Request <- renderText({
c('The location is found successfully')
})
m %>% addMarkers(lng=temp$result$location$lng,
lat=temp$result$location$lat,
popup = paste0(input$Loc,'--',temp$result$level))
}
}else{
temp1 <- getcoord(input$Start)
temp2 <- getcoord(input$End)
if(temp1$status==0&temp2$status==0){
output$Request <- renderText({
c('Both start point and end point are valid')
})
route <- getRoute(input$Start,input$End)
m%>%addPolylines(route$lon,route$lat)%>%
addMarkers(lng=route$lon[c(1,nrow(route))],
lat=route$lat[c(1,nrow(route))],
popup = c(paste0(input$Start,'--',temp1$result$level),
paste0(input$End,'--',temp2$result$level)))
}else{
output$Request <- renderText({
c('One or both of origin and destination is invalid')
})
}
}
})
})
options(baidumap.key = 'pzsxVTAgQsSAXfolToTgqpdUebRTgZib 	')
library(shiny)
library(leaflet)
library(baidumap)
library(rjson)
runApp('2111')
source('E:/R_project/222/2111/app.R')
ui <- shinyUI(fluidPage(
## the area for title
headerPanel(title = 'Simulated BaiduMap'),
## plot the leaflet in the whole page
leafletOutput(outputId = 'map',width = '1920px',height = '1080px'),
## control inputs panel and button
absolutePanel(width = 430,top=200,left = 'auto',draggable = T,
textInput(inputId = 'Loc',label = 'THE PLACE'),
textInput(inputId = 'Start',label = 'FROM',width = "50%"),
textInput(inputId = 'End',label = 'TO',width = "50%"),
selectInput(inputId = 'selected',label = 'Route or Loc',
choices = c('Loc','Route'),selected = 'Loc',
multiple = F),
textOutput(outputId = 'Request'),
submitButton(text = "Submit")
)
))
runApp('map')
library(baidumap)
library(ggmap)
q <- getBaiduMap('北京大学', width=600, height=600, zoom=18, scale = 2, messaging=FALSE)
ggmap(q) #绘制地图
library(leaflet)
library(baidumap)
library(rjson)
q <- getBaiduMap('北京大学', width=600, height=600, zoom=18, scale = 2, messaging=FALSE)
ggmap(q) #绘制地图
runApp('map')
library(leaflet)
library(baidumap)
library(rjson)
q <- getBaiduMap('北京大学', width=600, height=600, zoom=18, scale = 2, messaging=FALSE)
ggmap(q) #绘制地图
runApp('map')
library(baidumap)
library(rjson)
## 获取“北京大学”的坐标
m <- getCoordinate(address='北京大学')
library(baidumap)
library(rjson)
## 获取“北京大学”的坐标
m <- getCoordinate(address='北京大学')
m
## 获取“北京大学”的坐标
m <- getCoordinate(address='北京大学')
fromJSON(m
## 获取“北京大学”的坐标
m <- getCoordinate(address='北京大学')
fromJSON(m)
## 获取“北京大学”的坐标
m <- getCoordinate(address='北京大学')
fromJSON(m)
## 获取“北京大学”的坐标
m <- getCoordinate(address='北京大学')
fromJSON(m)
library(baidumap)
library(rjson)
## 获取“北京大学”的坐标
m <- getCoordinate(address='北京大学')
fromJSON(m)
## 获取“北京大学”的坐标
m <- getCoordinate(address='北京大学' output='json')
fromJSON(m)
## 获取“北京大学”的坐标
m <- getCoordinate('北京大学' output='json')
fromJSON(m)
## 获取“北京大学”的坐标
m <- getCoordinate('北京大学' output='json')
fromJSON(m)
## 获取“北京大学”的坐标
m <- getCoordinate('北京大学' output='json')
fromJSON(m)
## 获取“北京大学”的坐标
m <- getCoordinate('北京大学')
fromJSON(m)
## 获取“北京大学”的坐标
m <- getCoordinate('北京大学')
fromJSON(m)
clc
clear
clearall
## 获取“北京大学”的坐标
m <- getCoordinate('北京大学')
fromJSON(m)
m <- getCoordinate('北京大学')
getCoordinate('北京大学',output='json')  #json格式
library(shiny)
options(baidumap.key = 'pzsxVTAgQsSAXfolToTgqpdUebRTgZib')
getCoordinate('北京大学',output='json')  #json格式
getCoordinate('北京大学')  #json格式
getLocation(c(118.12845, 24.57232),formatted = T)
help(getCoordinate)
getCoordinate('北京大学')
source('E:/R_project/222/121333.R', encoding = 'UTF-8')
source('E:/R_project/222/121333.R', encoding = 'UTF-8')
getCoordinate('北京大学')
getCoordinate('北京大学')
runApp('map')
runApp('map')
m <- getCoordinate('北京大学')
fromJSON(m)
getLocation(c(118.12845, 24.57232),formatted = T)
help(fluidPage)
help(leafletOutput)
source('E:/R_project/222/121333.R', encoding = 'UTF-8')
runApp('map')
library(leaflet)
m <- leaflet()
m%>%addTiles()
library(leaflet)
m <- leaflet()
m%>%addTiles()
source('E:/R_project/222/121333.R', encoding = 'UTF-8')
runApp('map')
help(leaflet)
source('E:/R_project/222/121333.R', encoding = 'UTF-8')
source('E:/R_project/222/121333.R', encoding = 'UTF-8')
runApp('map')
help(fluidPage)
source('E:/R_project/222/121333.R', encoding = 'UTF-8')
runApp('map')
help(leaflet)
source('E:/R_project/222/121333.R', encoding = 'UTF-8')
runApp('map')
help(absolutePanel)
source('E:/R_project/222/121333.R', encoding = 'UTF-8')
help(addTiles)
runApp('map')
help(submitButton)
help(addMarkers)
source('E:/R_project/222/121333.R', encoding = 'UTF-8')
runApp('map')
runApp('map')
runApp('map')
m <- leaflet()
library(leaflet)
m <- leaflet()
m%>%addTiles()
source('E:/R_project/222/121333.R', encoding = 'UTF-8')
help(addTiles)
runApp('map')
runApp('map')
shiny::runApp('map')
runApp('map')
runApp('map')
runApp('map')
runApp('map')
install.packages("shinydashboard")
shiny::runApp('map')
runApp('map')
runApp('map')
dashboardPage(
dashboardHeader(),
dashboardSidebar(),
dashboardBody(),
)
library(shinydashboard)
dashboardPage(
dashboardHeader(),
dashboardSidebar(),
dashboardBody(),
)
update.packages()
update.packages(shinydashboard)
library(shinydashboard)
dashboardPage(
dashboardHeader(),
dashboardSidebar(),
dashboardBody(),
)
dashboardPage(
dashboardHeader(),
dashboardSidebar(),
dashboardBody()
)
library(shinydashboard)
dashboardPage(
dashboardHeader(),
dashboardSidebar(),
dashboardBody()
)
shiny::runApp('map')
runApp('map')
runApp('map')
runApp('map')
library(RMySQL)
mySQLcon <- dbConnect(RMySQL::MySQL(),
dbname = "ssm_crud",
host="localhost",
user = "root", password = "1234")
help(DBI)
help(RMySQL)
library(RMySQL)
library(DBI)
mySQLcon <- dbConnect(RMySQL::MySQL(),
dbname = "ssm_crud",
host="localhost",
user = "root", password = "1234")
summary(mySQLcon)
dbListTables(mySQLcon)
dbDisconnect(mySQLcon)
help(melt)
library(reshape2)
help(melt)
shiny::runApp('map')
runApp('map')
install.packages("hyfo")
help(hyfo)
library(hyfo)
help(hyfo)
help("hyfo")
help(hyfo)
library(hyfo)
help(hyfo)
??hyfo
help(reshape2)
library(hyfo)
help(hyfo)
help(hyfo)
library(shiny)
help(shiny)
help(hyfo)
help(hyfo)
help(zoo)
library(zoo)
help(zoo)
library(hyfo)
library(RMySQL)
library(DBI)
library(hyfo)
help(hyfo)
help(zoo)
x.Date <- as.Date("2003-02-01") + c(1, 3, 7, 9, 14) - 1
x <- zoo(rnorm(5), x.Date)
plot(x)
time(x)
x.Date <- as.Date("2003-02-01") + c(1, 3, 7, 9, 14) - 1
x <- zoo(rnorm(5), x.Date)
library(zoo)
x <- zoo(rnorm(5), x.Date)
plot(x)
time(x)
help(rnorm)
x <- zoo(rnorm(8), x.Date)
plot(x)
x <- zoo(rnorm(20), x.Date)
plot(x)
time(x)
