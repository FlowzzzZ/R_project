help(maptools)
library(maptools)
help(maptools)
help(rgeos )
library(ncdf4)
help(ncdf4 )
help(ncdf4)
help(MASS)
library(MASS)
help(MASS)
help(methods)
help(methods)
install.packages("dynatopmodel")
library(dynatopmodel)
help(rgdal)
help(regos)
help(deSolve)
help(deSolve)
help(deSolve)
help(dynatopmodel)
help(xts)
library(xts)
library(zoo)
library(xts)
help(xts)
help(sp)
library(sp)
help(sp)
help(raster)
library(raster)
help(raster)
help(lubridate)
library(lubridate)
help(lubridate)
help(topmodel)
library(topmodel)
help(topmodel)
library(grDevices)
help(grDevices)
help(grDevices)
library(grDevices)
help(grDevices)
library(help = "grDevices")
library(stats)
help(stats)
help(utils)
library(tools)
help(tools)
library(help = "tools")
install.packages("wg")
install.packages("wg")
install.packages("wg")
install.packages("F:/迅雷下载/wq_0.4.8.tar.gz", repos = NULL, type = "source")
install.packages("wq")
library(wq)
help(wq)
library(ggplot2)
help(ggplot2)
library(knitr)
help(knitr)
install.packages("getMET")
install.packages("getMet")
library(getMet)
help(getMet)
library(EcoHydRology)
library(topmodel)
library(topmodel)
library(parallel)
library(DEoptim)
library(EcoHydRology)
help(EcoHydRology)
library(jsonlite)
help(jsonlite)
install.packages("hydrostats")
library(hydrostats)
help(hydrostats)
install.packages("weatherr")
library(weatherr)
library(ggplot2)
library(ggmap)
library(lubridate)
library(RJSONIO)
library(weatherr)
help(weatherr)
help(hydrostats)
help(getMet)
help(hyfo)
filePath <- system.file("extdata", "tnc.nc", package = "hyfo")
varname <- getNcdfVar(filePath)
nc <- loadNcdf(filePath, varname)
varname <- getNcdfVar(filePath)
library(hyfo)
library(zoo)
library(sp)
library(rgdal)
library(moments)
library(maps)
library(maptools)
library(ncdf4)
library(MASS)
varname <- getNcdfVar(filePath)
nc <- loadNcdf(filePath, varname)
data(tgridData)
tgridData
help(data)
help(dynatopmodel)
library(dynatopmodel)
help(dynatopmodel)
help(wq)
library(wq)
help(wq)
dates <- as.Date(c("1996-01-01", "1999-12-31", "2004-02-29", "2005-03-01"))
date2decyear(dates)
decyear2date(c(1996.0014, 1999.9986, 2004.1626, 2005.1630))
monthNum(as.Date(c('2007-03-17', '2003-06-01')))
y = Sys.time()
years(y)
monthNum(dates)
monthNum(y)
years(dates)
z = c(1,2,3,5,10)  # 5 depths
x = matrix(rnorm(30), nrow = 5)  # 6 variables at 5 depths
layerMean(cbind(z, x))
y <- mts2ts(sfbayChla, seas = 2:4)
plot(y, type = 'n')
abline(v = 1978:2010, col = 'lightgrey')
lines(y, type = 'h')
y <- mts2ts(sfbayChla, seas = 2:4)
plot(y, type = 'n')
abline(v = 1978:2010, col = 'lightgrey')
lines(y, type = 'h')
y
showClass("WqData")
sfb <- wqData(sfbay, c(1,3,4), 5:12, site.order = TRUE, type = "wide",
time.format = "%m/%d/%Y")
# Summarize the data
summary(sfb)
signature(x = "WqData"):
plot(x, vars, num.col = NULL)
chl27 = sfbayChla[, 's27']
plotTsTile(chl27, legend.title = 'Chl log-anomaly')
help(dynatopmodel)
help(wq)
data(Acheron)
Acheron<-ts.format(Acheron)
plot(Acheron[,"Date"],Acheron[,"Q"],type="l", xlab="Date",ylab="Discharge (ML/day)")
Acheron<-ts.format(Acheron)
plot(Acheron[,"Date"],Acheron[,"Q"],type="l", xlab="Date",ylab="Discharge (ML/day)")
data(Acheron)
Acheron<-ts.format(Acheron)
plot(Acheron[,"Date"],Acheron[,"Q"],type="l", xlab="Date",ylab="Discharge (ML/day)")
install.packages("FAdist")
library(FAdist)
help(FAdist)
install.packages("RObsDat")
##应用于水文信息的各类分布
library(RObsDat)
help(RObsDat)
install.packages("geotopbricks")
file <- system.file("rendena100/SnowDepthMapFile-2014-MA-mean-winter-2013-2014.asc",
package="geotopbricks")
snow <- raster(file)
min <- 0 # snow depth expressed in millimeters
max <- 2500 # snow depth expressed in millimeters
colors <- terrain.colors(1000)
color.bar.raster(x=snow,col=colors,digits=2)
color.bar.raster(x=snow,col=colors,min=min,max=max,digits=2)
library(geotopbricks)
library(raster)
library(sp)
library(stringr)
library(geotopbricks)
file <- system.file("rendena100/SnowDepthMapFile-2014-MA-mean-winter-2013-2014.asc",
package="geotopbricks")
snow <- raster(file)
min <- 0 # snow depth expressed in millimeters
max <- 2500 # snow depth expressed in millimeters
colors <- terrain.colors(1000)
color.bar.raster(x=snow,col=colors,digits=2)
color.bar.raster(x=snow,col=colors,min=min,max=max,digits=2)
help(OPS)
install.packages("rivervis")
##水文数据管理
library(rivervis)
help(rivervis)
install.packages("hddtools")
##水文数据管理
library(hddtools)
install.packages("C:/Users/Administrator/Desktop/hddtools_0.7.tar.gz", repos = NULL, type = "source")
library(hddtools)
install.packages("C:/Users/Administrator/Desktop/hddtools_0.7.tar.gz", repos = NULL, type = "source")
help(install.packages)
install.packages(c('rnrfa', 'Hmisc', 'gdata'))
install.packages("C:/Users/Administrator/Desktop/hddtools_0.7.tar.gz", repos = NULL, type = "source")
library(hddtools)
library(rgdal)
library(hddtools)
install.packages("waterData")
# River Visualisation Tool
##水文数据管理
library(waterData)
data <- list(c(1,1,1),c(2,2,2))
bind <- 'rbind'
checkBind(data,bind)
library(hyfo)
data <- list(c(1,1,1),c(2,2,2))
bind <- 'rbind'
checkBind(data,bind)
data(tgridData)
b1 <- getPreciBar(tgridData, method = 'annual')
b2 <- getPreciBar(tgridData, method = 'meanMonthly')
data(tgridData)
getSpatialMap(tgridData, method = 'meanAnnual')
getSpatialMap(tgridData, method = 'winter')
par <- get.disp.par(graphics.show=TRUE,
graphics.interval=6)
library(dynatopmodel)
par <- get.disp.par(graphics.show=TRUE,
graphics.interval=6)
# An R Plug-in for the Distributed Hydrological Model GEOtop
##水文数据管理
library(raster)
par
library(ggplot2)
library(ggmap)
library(lubridate)
library(RJSONIO)
library(weatherr)
library(XML)
library(weatherr)
ggele(lat=22.39643,lon=114.1095)
library(geotopbricks)
# The examples is the following R script conteined in a 'inst' directory of the package source
f <- system.file("doc/examples/example.plot.GeotopRasterBrick.R",package="geotopbricks")
#  source(f) # Uncomment this line to run the example.
# You can copy the example file using file.copy(from=f,to=....,...) See file.copy documentation
library(stringr)
library(zoo)
library(geotopbricks)
f <- system.file("doc/examples/example.plot.GeotopRasterBrick.R",package="geotopbricks")
plot(f)
data(tgridData)
library(hyfo)
data(tgridData)
b1 <- getPreciBar(tgridData, method = 'annual')
b2 <- getPreciBar(tgridData, method = 'meanMonthly')
b1 <- getPreciBar(tgridData, method = 'march')
b1 <- getPreciBar(tgridData, method = '1')
b1 <- getPreciBar(tgridData, method = 2)
b1 <- getPreciBar(tgridData, method = 4)
b4 <- getPreciBar(tgridData, method = 'annual',cell=c(2,3))
b4 <- getPreciBar(tgridData, method = 'annual',)
b4 <- getPreciBar(tgridData, method = 'annual',cell=c(10,10))
b4 <- getPreciBar(tgridData, method = 'annual',cell=c(3,2))
b4 <- getPreciBar(tgridData, method = 'annual',cell=c(2,3))
data(tgridData)
tgridData
b4 <- getPreciBar(tgridData, method = 'annual',cell=c(4,4))
b4 <- getPreciBar(tgridData, method = 'annual',cell=c(3,2))
b4 <- getPreciBar(tgridData, method = 'annual',cell=c(3,3))
b4 <- getPreciBar(tgridData, method = 'annual',cell=c(1,3))
b4 <- getPreciBar(tgridData, method = 'annual',plotRange = FALSE)
b5 <- getPreciBar(tgridData, method = 'annual',info = TRUE)
b3 <- getPreciBar(tgridData, method = 'spring')
b1 <- getPreciBar(tgridData, method = 2, output = 'ggplot', name = 'b1')
b2 <- getPreciBar(tgridData, method = 3, output = 'ggplot', name = 'b2')
getPreciBar_comb(b1, b2)
getSpatialMap(tgridData, method = 'meanAnnual')
getSpatialMap(tgridData, method = 'winter')
?getSpatialMap_mat
getSpatialMap(tgridData, method = 'winter', catchment = testCat)
file <- system.file("extdata", "point.txt", package = "hyfo")
point <- read.table(file, header = TRUE, sep = ',' )
getSpatialMap(tgridData, method = 'winter', catchment = testCat, point = point)
a1 <- getSpatialMap(tgridData, method = 'mean')
a2 <- getSpatialMap(tgridData, method = 'max')
a3 <- getSpatialMap(tgridData, method = 'winter')
a4 <- getSpatialMap(tgridData, method = 'summer')
#For example, if we want to investigate the difference between mean value and max.
a5 <- a2 - a1
getSpatialMap_mat(a4)
getSpatialMap_mat(a4)
getSpatialMap_comb(a1, a2)
getSpatialMap_comb(a3, a4)
getSpatialMap_comb(a3, a4)
a1 <- getSpatialMap(tgridData, method = 'mean', output = 'ggplot')
a2 <- getSpatialMap(tgridData, method = 'max', output = 'ggplot')
a3 <- getSpatialMap(tgridData, method = 'winter', output = 'ggplot')
a4 <- getSpatialMap(tgridData, method = 'summer', output = 'ggplot')
a1 <- getSpatialMap(tgridData, method = 'mean', output = 'ggplot',name = 'a1')
a2 <- getSpatialMap(tgridData, method = 'max', output = 'ggplot',name = 'a2')
a3 <- getSpatialMap(tgridData, method = 'winter', output = 'ggplot', name = 'a3')
a4 <- getSpatialMap(tgridData, method = 'summer', output = 'ggplot', name = 'a4')
getSpatialMap_comb(a3, a4)
plotTS(testdl[[1]])
plotTS(testdl[[1]], x = 'xxx', y = 'yyy', title = 'aaa')
testdl
testdl
testdl[[1]]
testdl[[2]]
testdl[1]
testdl[1]
testdl[2]
testdl[1]
plotTS(testdl[1])
chl <- sfbayChla[, 1:4]
plotTs(chl, dot.size = 1.5, ylab = 'Chl-a', strip.labels = paste('Station',
substring(colnames(chl), 2, 3)), ncol = 1, scales = "free_y")
sfbayChla
sfbayChla
plotTs(chl, dot.size = 1.5, ylab = 'Chl-a', strip.labels = paste('Station',
substring(colnames(chl), 2, 3)), ncol = 1, scales = "free_y")
help(colnames)
plotTs(chl, dot.size = 1.5, ylab = 'Chl-a', strip.labels = paste('Station',
substring(colnames(chl), 2, 3)), ncol = 1, )
dates <- as.Date(c("1996-01-01", "1999-12-31", "2004-02-29", "2005-03-01"))
plotTs(chl, dot.size = 1.5, ylab = 'Chl-a', strip.labels = paste('Station',
substring(colnames(chl), 2, 3)), ncol = 10, scales = "free_y")
plotTs(chl, dot.size = 1.5, ylab = 'Chl-a', strip.labels = paste('Station',
substring(colnames(chl), 2, 3)), ncol = 5, scales = "free_y")
plotTs(chl, dot.size = 1.5, ylab = 'Chl-a', strip.labels = paste('Station',
substring(colnames(chl), 2, 3)), ncol = 1, scales = "free_y")
plotTs(chl, dot.size = 1.5, ylab = 'Chl-a', strip.labels = paste('Station',
substring(colnames(chl), 2, 3)))
plotTs(chl, dot.size = 1.5, ylab = 'Chl-a', strip.labels = paste('Station',
substring(colnames(chl), 2, 3)), ncol = 2, scales = "free_y")
plotTs(chl, dot.size = 1.5, ylab = 'Chl-a', strip.labels = paste('Station',
substring(colnames(chl), 2, 3)), ncol = 1, scales = "free_y")
help(ggplot2)
bloom <- aggregate(sfbayChla[, 1:6], 1, meanSub, sub=3:5)
plotTsAnom(bloom, ylab = 'Chl-a', strip.labels = paste('Station',
substring(colnames(bloom), 2, 3)), ncol = 2, scales = "free_y")
help(aggregate)
plotTsAnom(chl, ylab = 'Chl-a', strip.labels = paste('Station',
substring(colnames(bloom), 2, 3)), ncol = 2, scales = "free_y")
plotTsAnom(chl, ylab = 'Chl-a', strip.labels = paste('Station',
substring(colnames(chl), 2, 3)), ncol = 2, scales = "free_y")
plotTs(chl, dot.size = 1.5, ylab = 'Chl-a', strip.labels = paste('Station',
substring(colnames(chl), 2, 3)), ncol = 1, scales = "free_y")
plotTsAnom(chl, ylab = 'Chl-a', strip.labels = paste('Station',
substring(colnames(chl), 2, 3)), ncol = 1, scales = "free_y")
chl27 = sfbayChla[, 's27']
plotTsTile(chl27, legend.title = 'Chl log-anomaly')
library(RMySQL)
library(DBI)
library(RMySQL)
m <- dbDriver("MySQL")
con <- dbConnect(m, dbname = "ssm_crud",
host="localhost",
user = "root", password = "1234")
sqhandler <-  new("odm1_1Ver", con=con)
options(odm.handler=sqhandler)
dbDisconnect(con)
sqhandler <-  new("odm1_1Ver", con=con)
m <- dbDriver("MySQL")
con <- dbConnect(m, dbname = "ssm_crud",
host="localhost",
user = "root", password = "1234")
sqhandler <-  new("odm1_1Ver", con=con)
help( new)
library(RObsDat)
library(zoo)
library(RObsDat)
options(odm.handler=sqhandler)
sqhandler <-  new("odm1_1Ver", con=con)
options(odm.handler=sqhandler)
help( new)
addSite(Code="test", Name="Virtual test site", x=-5, y=46,
LatLongDatum="WGS84", Elevation=1500, State="Germany")
addSite(Code="test", Name="Virtual test site", x=-5, y=46,
LatLongDatum="WGS84", Elevation=1500, State="Germany")
library(xts)
library(spacetime)
example.data <- xts(1:40, seq(as.POSIXct("2014-01-01", tz="UTC"),
as.POSIXct("2014-02-09", tz="UTC"), length.out=40))
example.data[40] <- 30
example.data[35] <- 22
addDataValues(example.data[1:20], Site="Virtual test site", Variable="test_dist",
Source="Madeup", QualityControlLevel="test_ok")
help( options)
dbDisconnect(con)
#connect to standard database
getDefaultDB()
#add data
addOffsetType(Units="cm", Description="Above Ground Level")
getMetadata(table="OffsetType", Description="Ground Level")
getDefaultDB()
getDefaultDB()
library(RSQLite)
getDefaultDB()
getDefaultDB()
addOffsetType(Units="cm", Description="Above Ground Level")
getMetadata(table="OffsetType", Description="Ground Level")
AAA <- data.frame(
# date column
Date = seq(as.Date('1990-10-28'),as.Date('1997-4-1'),1),
# value column
AAA = sample(1:100,length(seq(as.Date('1990-10-28'),as.Date('1997-4-1'),1)), repl = TRUE))
BBB <- data.frame(
Date = seq(as.Date('1993-3-28'),as.Date('1999-1-1'),1),
BBB = sample(1:100,length(seq(as.Date('1993-3-28'),as.Date('1999-1-1'),1)), repl = TRUE))
CCC <- data.frame(
Date = seq(as.Date('1988-2-2'),as.Date('1996-1-1'),1),
CCC = sample(1:100,length(seq(as.Date('1988-2-2'),as.Date('1996-1-1'),1)), repl = TRUE))
list <- list(AAA, BBB, CCC)# dput() and dget() can be used to save and load list file.
list_com <- extractPeriod(list, commonPeriod = TRUE)
# list_com is the extracted datalist.
str(list_com)
AAA <- data.frame(
# date column
Date = seq(as.Date('1990-10-28'),as.Date('1997-4-1'),1),
# value column
AAA = sample(1:100,length(seq(as.Date('1990-10-28'),as.Date('1997-4-1'),1)), repl = TRUE))
BBB <- data.frame(
Date = seq(as.Date('1993-3-28'),as.Date('1999-1-1'),1),
BBB = sample(1:100,length(seq(as.Date('1993-3-28'),as.Date('1999-1-1'),1)), repl = TRUE))
CCC <- data.frame(
Date = seq(as.Date('1988-2-2'),as.Date('1996-1-1'),1),
CCC = sample(1:100,length(seq(as.Date('1988-2-2'),as.Date('1996-1-1'),1)), repl = TRUE))
list <- list(AAA, BBB, CCC)
list_com <- extractPeriod(list, commonPeriod = TRUE)
library(hyfo)
list_com <- extractPeriod(list, commonPeriod = TRUE)
str(list_com)
datalist_com1 <- extractPeriod(list_com, startDate = '1994-1-1', endDate = '1995-10-1')
seaKen(tsSub(c27))  # Aug and Dec missing the most key data
seaKen(tsSub(c27, seas = c(1:7, 9:11)))
c27 <- sfbayChla[, 's27']
seaKen(tsSub(c27))  # Aug and Dec missing the most key data
seaKen(tsSub(c27, seas = c(1:7, 9:11)))
seaKen(tsSub(c27))
seaKen(tsSub(c27, seas = c(1:7, 9:11)))
data(testdl)
a <- getAnnual(testdl)
library(hyfo)
data(testdl)
a <- getAnnual(testdl)
b <- getAnnual(testdl, output = 'mean', minRecords = 350)
c <- getAnnual(testdl, output = 'mean', minRecords = 365)
filePath <- system.file("extdata", "tnc.nc", package = "hyfo")
varname <- getNcdfVar(filePath)
nc <- loadNcdf(filePath, varname)
data(tgridData)
# Since the example data, has some NA values, the process will include some warning #message,
# which can be ignored in this case.
# Then we will use nc data as forecasting data, and use itself as hindcast data,
# use tgridData as observation.
biasFactor <- getBiasFactor(nc, tgridData)
biasFactor
data(testdl)
a <- testdl[[1]]
# Choose example from "1994-2-4" to "1996-1-4"
b1<- getHisEnsem(a, example = c('1995-2-4', '1996-1-4'), plot = 'cum', output = 'ggplot',
name = 1)
b2 <- getHisEnsem(a, example = c('1995-4-4', '1996-3-4'), plot = 'cum', output = 'ggplot',
name = 2)
getEnsem_comb(b1, b2)
getEnsem_comb(list = list(b1, b2), nrow = 2)
library(dynatopmodel)
data("brompton")
# Generate time series at hourly and 15 minute intervals
pe.60 <- approx.pe.ts("2012-01-01", "2012-12-31", dt=1)
plot(pe.60)
library(wq)
y <- decompTs(sfbayChla[, 's27'])
y
plot(y, nc=1, main="")
install.packages("EcoHydRology")
library(EcoHydRology)
data(OwascoInlet)
head(OwascoInlet)
hydrograph(OwascoInlet)
RainHeat(20,0.01)
install.packages("berryFunctions")
library(berryFunctions)
addAlpha("red", c(0.1, 0.3, 0.6, 1))
addAlpha(1:3)
plot(runif(1000), col=NewColors, pch=16, cex=2)
NewColors <- addAlpha(c("red","blue","yellow","green", "purple"), 0:200/200)
plot(runif(1000), col=NewColors, pch=16, cex=2)
NewColors <- addFade(c("red","blue","yellow","green", "purple"), 0:200/200)
plot(runif(1000), col=NewColors, pch=16, cex=2)
NewColors <- addFade(c("red","blue","yellow","green", "purple"), 0:200/200)
plot(runif(1000), col=NewColors, pch=16, cex=2)
NewColors <- addAlpha(c("red","blue","yellow","green", "purple"), 0:200/200)
plot(runif(1000), col=NewColors, pch=16, cex=2)
Time <- 0:100
plot(Time, unitHydrograph(n=2,  k=3, t=Time), type="l", las=1,
main="Unit Hydrograph - linear storage cascade")
install.packages("ecoval")
install.packages("ecoval")
library(ecoval)
library(utility)
library(rivernet)
library(ecoval)
hydrol <- msk.hydrol.2011.create()
plot(hydrol)
hydrol.german <- msk.hydrol.2011.create("Deutsch")
plot(hydrol.german)
install.packages("hydroTSM")
library(hydroTSM)
library(xts)
library(hydroTSM)
## Loading the SanMartino daily precipitation data (1921-1990)
data(SanMartinoPPts)
x <- SanMartinoPPts
# Amount of years in 'x' (needed for computing the average)
nyears <- length( seq(from=time(x[1]), to=time(x[length(x)]), by="years") )
## Average annual precipitation for the 70 years period.
# It is necessary to divide by the amount of years to obtain the average annual value,
# otherwise it will give the total precipitation for all the 70 years.
annualfunction(x, FUN=sum, na.rm=TRUE) / nyears
