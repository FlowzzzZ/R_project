#Full period
hydrograph(ngaruroro)
hydrograph(ngaruroro, startdate = 1981, enddate = 1982, amin = TRUE)
hydrograph(ngaruroro, startdate = "01/01/1981", enddate = "31/03/1981")
hydrograph(ngaruroro, startdate = "01/01/1981", enddate =
"31/03/1981",log = "y")
View(ngaruroro)
data(ngaruroro)
ng <- as.xts(ngaruroro)
year <- water_year(time(ng), origin = "Sept")
ng10 <- ng[year %in% 1991:2000, ]
# computes the annual minima (AM)
apply.seasonal(ng10, varying = "yearly", origin = 9)
data(ngaruroro)
n1 <- subset(ngaruroro, year %in% 1985:1989)
n2 <- subset(ngaruroro, year %in% 1990:1995)
dmcurve(n1,n2, namex = "'Ngaruroro 1985 - 1989'", namey = "'Ngaruroro 1990
- 1995'")
data(ngaruroro)
fdc(ngaruroro,year = 1991)
y <- rnorm(10)
pp <- gringorten(y)
pp
plot(pp ~ y, ylim = c(0, 1))
gringorten(y)
data(ngaruroro)
multistationsreport(ngaruroro, indices = c("meanflow", "MAM7"))
seventies <- subset(ngaruroro, hyear %in% 1970:1979)
eighties <- subset(ngaruroro, hyear %in% 1980:1989)
nineties <- subset(ngaruroro, hyear %in% 1990:1999)
multistationsreport(seventies, eighties, nineties)
data(ray)
r <- find_droughts(ray, threshold = 0.02)
plot(r["1970::1970", ])
plot(r["1970::1970", ], step = FALSE)
data(ray)
r <- find_droughts(ray, threshold = 0.02)
plot(r["1970::1970", ])
data(ray)
r <- find_droughts(ray, threshold = 0.02)
plot(r["1970::1970",])
plot(r["1970::1970",],type = "dygraph")
r <- find_droughts(ray, threshold = 0.02)
plot(r,type = "dygraph")
plot(ray,type = "dygraph")
data(ngaruroro)
sbplot(ngaruroro)
#Starting with january
sbplot(ngaruroro, hyearorder = FALSE)
sbplot(ngaruroro)
sbplot(ngaruroro, hyearorder = FALSE)
sbplot(ngaruroro, hyearorder = FALSE)
data(ngaruroro)
#To few points identified as peak flood discharge
recessionplot(ngaruroro, peaklevel = .5, start = 1991, end = 1991)
x <- c(-2, 3)
curve(sin, -2*pi, 2*pi, xname = "t")
trace_value(x, sin(x), digits = c(0, 1))
curve(sin, -2*pi, 2*pi, xname = "t")
trace_value(x, sin(x), digits = c(0, 1))
b1 <- getPreciBar(tgridData, method = 4)
b2 <- getPreciBar(tgridData, method = 'meanMonthly')
b3 <- getPreciBar(tgridData, method = 'annual')
b4 <- getPreciBar(tgridData, method = 'annual',plotRange = FALSE)
b5 <- getPreciBar(tgridData, method = 'annual',info = TRUE)
b6 <- getPreciBar(tgridData, method = 'spring')
b4 <- getPreciBar(tgridData, method = 'annual',plotRange = TRUE)
b4 <- getPreciBar(tgridData, method = 'annual',plotRange = FALSE)
b4 <- getPreciBar(tgridData, method = 'annual',plotRange = TRUE)
b2 <- getPreciBar(tgridData, method = 'meanMonthly',info = TRUE)
b1 <- getPreciBar(tgridData, method = 4)
b2 <- getPreciBar(tgridData, method = 'meanMonthly',info = TRUE)
b1 <- getPreciBar(tgridData, method = 4)
b2 <- getPreciBar(tgridData, method = 'meanMonthly',info = TRUE)
b2 <- getPreciBar(tgridData, method = 'meanMonthly',info = TRUE)
b1 <- getPreciBar(tgridData, method = 2, output = 'ggplot', name = 'b1')
b1 <- getPreciBar(tgridData, method = 2, output = 'ggplot', name = 'b1')
b2 <- getPreciBar(tgridData, method = 3, output = 'ggplot', name = 'b2')
getPreciBar_comb(b1, b2)
getSpatialMap(tgridData, method = 'meanAnnual')
getSpatialMap(tgridData, method = 'meanAnnual')
getSpatialMap(tgridData, method = 'winter', catchment = testCat)
getSpatialMap(tgridData, method = 'winter', catchment = testCat, point = point)
b1 <- getPreciBar(tgridData, method = 2, output = 'ggplot', name = 'b1')
b2 <- getPreciBar(tgridData, method = 3, output = 'ggplot', name = 'b2')
getPreciBar_comb(b1, b2)
getSpatialMap_comb(a3, a4)
getSpatialMap_mat(a4)
a4 <- getSpatialMap(tgridData, method = 'summer', output = 'ggplot', name = 'a4')
getSpatialMap_comb(a3, a4)
getSpatialMap_mat(a4)
a1 <- getSpatialMap(tgridData, method = 'mean', output = 'ggplot',name = 'a1')
a2 <- getSpatialMap(tgridData, method = 'max', output = 'ggplot',name = 'a2')
a3 <- getSpatialMap(tgridData, method = 'winter', output = 'ggplot', name = 'a3')
a4 <- getSpatialMap(tgridData, method = 'summer', output = 'ggplot', name = 'a4')
a5 <- a2 - a1
getSpatialMap_mat(a4)
getSpatialMap_mat(a4)
getSpatialMap_mat(a5)
testdl[1]
plotTS(testdl[1])
plotTS(testdl[[1]], x = 'xxx', y = 'yyy', title = 'aaa')
View(testdl)
View(testdl[1])
View(testdl[1][["AAA"]])
View(testdl[1][["AAA"]])
a1 <- plotTS(testdl[[1]], output = 'ggplot', name = 1)
a2 <- plotTS(testdl[[2]], output = 'ggplot', name = 2)
plotTS_comb(a1, a2)
plotTS_comb(list = list(a1, a2), y = 'y axis', nrow = 2)
chl <- sfbayChla[, 1:4]
plotTs(chl, dot.size = 1.5, ylab = 'Chl-a', strip.labels = paste('Station',
substring(colnames(chl), 2, 3)), ncol = 1, scales = "free_y")
plotTsAnom(chl, ylab = 'Chl-a', strip.labels = paste('Station',
substring(colnames(chl), 2, 3)), ncol = 1, scales = "free_y")
chl27 = sfbayChla[, 's27']
plotTsTile(chl27, legend.title = 'Chl log-anomaly')
data(testdl)
a <- getAnnual(testdl)
#set minRecords to control the calculation of annual rainfall.
b <- getAnnual(testdl, output = 'mean', minRecords = 350)
c <- getAnnual(testdl, output = 'mean', minRecords = 365)
a1 <- extractPeriod(testdl, comm = TRUE)
a2 <- list2Dataframe(a1)
getAnnual(a2)
a3 <- fillGap(a2)
getAnnual(a3)
getAnnual(a3)
a <- getAnnual(testdl)
b <- getAnnual(testdl, output = 'mean', minRecords = 350)
c <- getAnnual(testdl, output = 'mean', minRecords = 365)
getAnnual(a2)
getAnnual(a3)
a <- getAnnual(testdl)
data(OcaEnOnaQts)
## Daily Flow Duration Curve
fdc(OcaEnOnaQts)
data(OcaEnOnaQts)
library(hydroTSM)
data(OcaEnOnaQts)
fdc(OcaEnOnaQts)
fdcu(q, lband, uband)
data(OcaEnOnaQts)
q <- OcaEnOnaQts
# Creating a fictitious lower uncertainty band
lband <- q - min(q, na.rm=TRUE)
# Giving a fictitious upper uncertainty band
uband <- q + mean(q, na.rm=TRUE)
# Plotting the flow duration curve corresponding to 'q', with two uncertainty bounds
fdcu(q, lband, uband)
#Function to import daily hydrologic time series data given a USGS streamgage identification number.
q05054000.85 <- importDVs("05054000", sdate="1985-01-01", edate="2010-09-30")
#Function to calculate short-, medium-, and long-term hydrologic anomalies
anoms05054000 <- compAnom(q05054000.85, which=3)
#参考帮助文档的Value
plotAnoms(anoms05054000)
library(waterData)
q05054000.85 <- importDVs("05054000", sdate="1985-01-01", edate="2010-09-30")
#Function to calculate short-, medium-, and long-term hydrologic anomalies
anoms05054000 <- compAnom(q05054000.85, which=3)
#参考帮助文档的Value
plotAnoms(anoms05054000)
data(exampleWaterData)
plotParam(misQ05054000, code="00060", stat="00003", logscale=TRUE)
plotParam(misQ05054000, code=attributes(misQ05054000)$code,
stat=attributes(misQ05054000)$stat, logscale=TRUE)
chl27 <- sfbayChla[, 's27']
plotSeason(chl27, num.era = c(1978, 1988, 1998, 2008), ylab = 'Stn 27 Chl-a')
plotSeason(chl27, num.era = 3, same.plot = FALSE, ylab = 'Stn 27 Chl-a')
plotSeason(chl27, "by.month", ylab = 'Stn 27 Chl-a')
plotSeason(chl27, num.era = c(1978, 1988, 1998, 2008), ylab = 'Stn 27 Chl-a')
m <- climograph(pcp=pcp, tmx=tmx, tmn=tmn, na.rm=TRUE)
data(MaquehueTemuco)
pcp <- MaquehueTemuco[, 1]
tmx <- MaquehueTemuco[, 2]
tmn <- MaquehueTemuco[, 3]
## Plotting the climograph
m <- climograph(pcp=pcp, tmx=tmx, tmn=tmn, na.rm=TRUE)
data(SanMartinoPPts)
x <- window(SanMartinoPPts, end=as.Date("1930-12-31"))
## Plotting the daily ts only, and then automatic 'x' axis
plot(x, xaxt = "n", xlab="Time")
drawTimeAxis(x)
data(SanMartinoPPts)
x <- window(SanMartinoPPts, end=as.Date("1930-12-31"))
## Plotting the daily ts only, and then automatic 'x' axis
plot(x, xaxt = "n", xlab="Time")
drawTimeAxis(x)
x.idw <- hydrokrige(x.ts= x.ts, x.gis=EbroPPgis,
X="EAST_ED50", Y="NORTH_ED50", sname="ID", bname="CHE_BASIN_NAME",
type= "both",
subcatchments= EbroCatchmentsCHE,
cell.size= 3000,
ColorRamp= "Precipitation",
main= "IDW Precipitation on the Ebro")
data(EbroPPtsMonthly)
## Visualizing the correlation among the monthly precipitation values
## of the first 3 gauging stations in 'EbroPPtsMonthly'.
## The first column of 'EbroPPtsMonthly' has the dates.
hydropairs(EbroPPtsMonthly[,2:4])
## Loading daily streamflows at the station Oca en Ona (Ebro River basin, Spain) ##
data(OcaEnOnaQts)
## 3 ts, 3 boxplots and 3 histograms
hydroplot(OcaEnOnaQts, FUN=mean, ylab= "Q", var.unit = "m3/s")
hypsometric(dem)
matrixplot(a, var.type="Days", main="Number of months with info per year")
a <- dwi(EbroPPtsMonthly[,1:10], out.unit="years", dates=1)
matrixplot(a, var.type="Days", main="Number of months with info per year")
## Loading the SanMartino precipitation data
data(SanMartinoPPts)
# Selecting only the values up to Dec/1960
x <- window(SanMartinoPPts, end=as.Date("1960-12-31"))
## Daily zoo to monthly zoo
m <- daily2monthly(x, FUN=sum, na.rm=TRUE)
# Creating a data.frame with monthly values per year in each column
M <- matrix(m, ncol=12, byrow=TRUE)
colnames(M) <- month.abb
rownames(M) <- unique(format(time(m), "%Y"))
# Plotting the monthly precipitation values from 1921 to 1960.
# Useful for identifying dry/wet months
matrixplot(M, ColorRamp="Precipitation",
main="Monthly precipitation at San Martino st., [mm/month]")
#######
## Selecting Jan/1961 (first row) of 'EbroPPtsMonthly' in all the stations
x.ts <- as.numeric(EbroPPtsMonthly[1, 2:ncol(EbroPPtsMonthly)])
## Setting the name of the stations
names(x.ts) <- colnames(EbroPPtsMonthly[ ,2:ncol(EbroPPtsMonthly)])
########
## IDW interpolation and plot (Jan/61)
x.idw <- hydrokrige(x.ts= x.ts, x.gis=EbroPPgis,
X=X, Y=Y, sname=sname, bname=bname, elevation=elevation,
type= "cells", #'both'
subcatchments= EbroCatchmentsCHE, p4s= p4s,
cell.size= 3000, nmax= 50,
ColorRamp= "Precipitation",
main= "IDW Mean Annual Precipitation on the Ebro, Jan/1961")
## Storing the interpolated values
x.idw@data["Jan1961"]   <- x.idw@data["var1.pred"]
x.idw@data["var1.pred"] <- NULL
x.idw@data["var1.var"]  <- NULL
## Selecting the Jul/1961 of 'EbroPPtsMonthly' for all the stations
x.ts <- as.numeric(EbroPPtsMonthly[7, 2:ncol(EbroPPtsMonthly)])
## Setting the name of the stations
names(x.ts) <- colnames(EbroPPtsMonthly[ , 2:ncol(EbroPPtsMonthly)])
## Not run:
## IDW interpolation and plot (Jul/1961)
x.idw2 <- hydrokrige(x.ts= x.ts, x.gis=EbroPPgis,
X=X, Y=Y, sname=sname, bname=bname, elevation=elevation,
type= "cells", #'both'
subcatchments= EbroCatchmentsCHE, p4s= p4s,
cell.size= 3000, nmax= 50,
ColorRamp= "Precipitation",
main= "IDW Mean Annual Precipitation on the Ebro, Jul/1961")
# Adding the interpolated value for Jul/1961 to 'x.idw'
x.idw@data["Jul1961"] <- x.idw2@data["var1.pred"]
## Plotting in the same graph the 2 interpolated fields
mspplot(x=x.idw,
subcatchments=EbroCatchmentsCHE,
IDvar=NULL, p4s,
col.nintv=50,
main="IDW Monthly Precipitation on the Ebro River basin, [mm]",
stations.plot=FALSE,
arrow.plot=TRUE, arrow.offset=c(900000,4750000), arrow.scale=20000,
scalebar.plot=TRUE, sb.offset=c(400000,4480000), sb.scale=100000)
## End(Not run)
mspplot(x=x.idw,
subcatchments=EbroCatchmentsCHE,
IDvar=NULL, p4s,
col.nintv=50,
main="IDW Monthly Precipitation on the Ebro River basin, [mm]",
stations.plot=FALSE,
arrow.plot=TRUE, arrow.offset=c(900000,4750000), arrow.scale=20000,
scalebar.plot=TRUE, sb.offset=c(400000,4480000), sb.scale=100000)
obs <- 1:10
sim1 <- 2*obs + 5
sim2 <- 2*obs + 25
ggof(sim1, obs)
library(hydroGOF)
install.packages("hydroGOF")
library(hydroGOF)
ggof(sim1, obs)
sim <- 1:10
obs <- 1:10
gof(sim, obs)
sim <- 1:10
obs <- 1:10
gof(sim, obs)
sim <- 2:11
obs <- 1:10
## Not run:
plot2(sim, obs)
data(EgaEnEstellaQts)
obs <- EgaEnEstellaQts
# Selecting only the daily values belonging to the year 1961
obs <- window(obs, end=as.Date("1961-12-31"))
# Generating the lower and upper uncertainty bounds
lband <- obs - 5
uband <- obs + 5
## Not run:
plotbands(obs, lband, uband
)
data(EgaEnEstellaQts)
obs <- EgaEnEstellaQts
# Selecting only the daily values belonging to the year 1961
obs <- window(obs, end=as.Date("1961-12-31"))
# Generating the lower and upper uncertainty bounds
lband <- obs - 5
uband <- obs + 5
plotbandsonly(lband, uband)
plotbandsonly(lband, uband)
plot(obs, type="n")
plotbandsonly(lband, uband)
data(ngaruroro)
n1 <- subset(ngaruroro, year %in% 1985:1989)
n2 <- subset(ngaruroro, year %in% 1990:1995)
dmcurve(n1,n2, namex = "'Ngaruroro 1985 - 1989'", namey = "'Ngaruroro 1990
- 1995'")
hydrograph(ngaruroro)
x <- c(-2, 3)
curve(sin, -2*pi, 2*pi, xname = "t")
trace_value(x, sin(x), digits = c(0, 1))
dis <- seq(1, 100)
getMoment(dis)
getLMom(dis)
dis
#getLMom
dis <- seq(1, 100)
getLMom(dis)
# getMoment
getMoment(dis)
#getLMom
dis <- seq(1, 100)
dis
getLMom(dis)
#getLMom
dis <- seq(1, 100)
dis
getLMom(dis)
# getMoment
getMoment(dis)
#getLMom
dis <- seq(1, 100)
dis
getLMom(dis)
# getMoment
getMoment(dis)
getMeanPreci(tgridData)
# layerMean
z = c(1,2,3,5,10)  # 5 depths
x = matrix(rnorm(30), nrow = 5)  # 6 variables at 5 depths
layerMean(cbind(z, x))
# layerMean
z = c(1,2,3,5,10)  # 5 depths
x = matrix(rnorm(30), nrow = 5)  # 6 variables at 5 depths
layerMean(cbind(z, x))
#meanSub
z1=c(1,2,3,5)
z1
meanSub(z,z1)
## Loading daily streamflows at the station Oca en Ona (Ebro River basin, Spain) ##
data(OcaEnOnaQts)
x <- OcaEnOnaQts
## Daily to Monthly ts
m <- daily2monthly(x, FUN=mean, na.rm=FALSE)
# Plotting the monthly values
plot(m, xlab="Time")
## Plotting the annual moving average in station 'x'
lines(ma(m, win.len=12), col="blue")
ma(m, win.len=12)
ma(m, win.len=12)
data(OcaEnOnaQts)
x <- OcaEnOnaQts
## Daily to Monthly ts
m <- daily2monthly(x, FUN=mean, na.rm=FALSE)
ma(m, win.len=12)
data(OcaEnOnaQts)
x <- OcaEnOnaQts
## Daily to Monthly ts
m <- daily2monthly(x, FUN=mean, na.rm=FALSE)
m
ma(m, win.len=12)
data(OcaEnOnaQts)
x <- OcaEnOnaQts
## Daily to Monthly ts
m <- daily2monthly(x, FUN=mean, na.rm=FALSE)
m
ma(m, win.len=12)
obs <- 1:10
sim <- 1:10
mae(sim, obs)
obs <- 1:10
sim <- 2:11
mae(sim, obs)
##################
# Loading daily streamflows of the Ega River (Spain), from 1961 to 1970
data(EgaEnEstellaQts)
obs <- EgaEnEstellaQts
# Generating a simulated daily time series, initially equal to the observed series
sim <- obs
# Computing the mean absolute error for the "best" case
mae(sim=sim, obs=obs)
# Randomly changing the first 2000 elements of 'sim', by using a normal distribution
# with mean 10 and standard deviation equal to 1 (default of 'rnorm').
sim[1:2000] <- obs[1:2000] + rnorm(2000, mean=10)
# Computing the new mean absolute error
mae(sim=sim, obs=obs)
obs <- 1:10
sim <- 1:10
mae(sim, obs)
obs <- 1:10
sim <- 2:11
mae(sim, obs)
obs <- 1:10
sim <- 2:11
mae(sim, obs)
obs <- 1:10
sim <- 1:10
mae(sim, obs)
data(EgaEnEstellaQts)
obs <- EgaEnEstellaQts
# Generating a simulated daily time series, initially equal to the observed series
sim <- obs
# Computing the mean absolute error for the "best" case
mae(sim=sim, obs=obs)
sim[1:2000] <- obs[1:2000] + rnorm(2000, mean=10)
# Computing the new mean absolute error
mae(sim=sim, obs=obs)
sim[1:2000] <- obs[1:2000] + rnorm(2000, mean=10)
# Computing the new mean error
me(sim=sim, obs=obs)
sim[1:2000] <- obs[1:2000] + rnorm(2000, mean=10)
# Computing the new mean error
me(sim=sim, obs=obs)
data(EgaEnEstellaQts)
obs <- EgaEnEstellaQts
# Generating a simulated daily time series, initially equal to the observed series
sim <- obs
# Computing the mean squared error for the "best" case
mse(sim=sim, obs=obs)
# Randomly changing the first 2000 elements of 'sim', by using a normal distribution
# with mean 10 and standard deviation equal to 1 (default of 'rnorm').
sim[1:2000] <- obs[1:2000] + rnorm(2000, mean=10)
# Computing the new mean squared error
mse(sim=sim, obs=obs)
data(EgaEnEstellaQts)
obs <- EgaEnEstellaQts
# Generating a simulated daily time series, initially equal to the observed series
sim <- obs
# Computing the mean squared error for the "best" case
mse(sim=sim, obs=obs)
# Randomly changing the first 2000 elements of 'sim', by using a normal distribution
# with mean 10 and standard deviation equal to 1 (default of 'rnorm').
sim[1:2000] <- obs[1:2000] + rnorm(2000, mean=10)
# Computing the new mean squared error
mse(sim=sim, obs=obs)
# Loading daily streamflows of the Ega River (Spain), from 1961 to 1970
data(EgaEnEstellaQts)
obs <- EgaEnEstellaQts
# Generating a simulated daily time series, initially equal to the observed series
sim <- obs
# Computing the normalized root mean squared error for the "best" (unattainable) case
nrmse(sim=sim, obs=obs)
# Randomly changing the first 2000 elements of 'sim', by using a normal distribution
# with mean 10 and standard deviation equal to 1 (default of 'rnorm').
sim[1:2000] <- obs[1:2000] + rnorm(2000, mean=10)
# Computing the new normalized root mean squared error
nrmse(sim=sim, obs=obs)
# Loading daily streamflows of the Ega River (Spain), from 1961 to 1970
data(EgaEnEstellaQts)
obs <- EgaEnEstellaQts
# Generating a simulated daily time series, initially equal to the observed series
sim <- obs
# Computing the normalized root mean squared error for the "best" (unattainable) case
nrmse(sim=sim, obs=obs)
# Randomly changing the first 2000 elements of 'sim', by using a normal distribution
# with mean 10 and standard deviation equal to 1 (default of 'rnorm').
sim[1:2000] <- obs[1:2000] + rnorm(2000, mean=10)
# Computing the new normalized root mean squared error
nrmse(sim=sim, obs=obs)
data(EgaEnEstellaQts)
obs <- EgaEnEstellaQts
# Generating a simulated daily time series, initially equal to the observed series
sim <- obs
# Computing the root mean squared error for the "best" (unattainable) case
rmse(sim=sim, obs=obs)
# Randomly changing the first 2000 elements of 'sim', by using a normal distribution
# with mean 10 and standard deviation equal to 1 (default of 'rnorm').
sim[1:2000] <- obs[1:2000] + rnorm(2000, mean=10)
# Computing the new root mean squared error
rmse(sim=sim, obs=obs)
data(EgaEnEstellaQts)
obs <- EgaEnEstellaQts
# Generating a simulated daily time series, initially equal to the observed series
sim <- obs
# Computing the linear correlation for the "best" case
rPearson(sim=sim, obs=obs)
# Randomly changing the first 2000 elements of 'sim', by using a normal distribution
# with mean 10 and standard deviation equal to 1 (default of 'rnorm').
sim[1:2000] <- obs[1:2000] + rnorm(2000, mean=10)
# Computing the new correlation value
rPearson(sim=sim, obs=obs)
data(EgaEnEstellaQts)
obs <- EgaEnEstellaQts
# Generating a simulated daily time series, initially equal to the observed series
sim <- obs
# Computing the linear correlation for the "best" case
rPearson(sim=sim, obs=obs)
# Randomly changing the first 2000 elements of 'sim', by using a normal distribution
# with mean 10 and standard deviation equal to 1 (default of 'rnorm').
sim[1:2000] <- obs[1:2000] + rnorm(2000, mean=10)
# Computing the new correlation value
rPearson(sim=sim, obs=obs)
