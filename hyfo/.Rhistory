getMetadata(table="OffsetType", Description="Ground Level")
getDefaultDB()
getDefaultDB()
library(RSQLite)
getDefaultDB()
getDefaultDB()
addOffsetType(Units="cm", Description="Above Ground Level")
getMetadata(table="OffsetType", Description="Ground Level")
AAA <- data.frame(
# date column
Date = seq(as.Date('1990-10-28'),as.Date('1997-4-1'),1),
# value column
AAA = sample(1:100,length(seq(as.Date('1990-10-28'),as.Date('1997-4-1'),1)), repl = TRUE))
BBB <- data.frame(
Date = seq(as.Date('1993-3-28'),as.Date('1999-1-1'),1),
BBB = sample(1:100,length(seq(as.Date('1993-3-28'),as.Date('1999-1-1'),1)), repl = TRUE))
CCC <- data.frame(
Date = seq(as.Date('1988-2-2'),as.Date('1996-1-1'),1),
CCC = sample(1:100,length(seq(as.Date('1988-2-2'),as.Date('1996-1-1'),1)), repl = TRUE))
list <- list(AAA, BBB, CCC)# dput() and dget() can be used to save and load list file.
list_com <- extractPeriod(list, commonPeriod = TRUE)
# list_com is the extracted datalist.
str(list_com)
AAA <- data.frame(
# date column
Date = seq(as.Date('1990-10-28'),as.Date('1997-4-1'),1),
# value column
AAA = sample(1:100,length(seq(as.Date('1990-10-28'),as.Date('1997-4-1'),1)), repl = TRUE))
BBB <- data.frame(
Date = seq(as.Date('1993-3-28'),as.Date('1999-1-1'),1),
BBB = sample(1:100,length(seq(as.Date('1993-3-28'),as.Date('1999-1-1'),1)), repl = TRUE))
CCC <- data.frame(
Date = seq(as.Date('1988-2-2'),as.Date('1996-1-1'),1),
CCC = sample(1:100,length(seq(as.Date('1988-2-2'),as.Date('1996-1-1'),1)), repl = TRUE))
list <- list(AAA, BBB, CCC)
list_com <- extractPeriod(list, commonPeriod = TRUE)
library(hyfo)
list_com <- extractPeriod(list, commonPeriod = TRUE)
str(list_com)
datalist_com1 <- extractPeriod(list_com, startDate = '1994-1-1', endDate = '1995-10-1')
seaKen(tsSub(c27))  # Aug and Dec missing the most key data
seaKen(tsSub(c27, seas = c(1:7, 9:11)))
c27 <- sfbayChla[, 's27']
seaKen(tsSub(c27))  # Aug and Dec missing the most key data
seaKen(tsSub(c27, seas = c(1:7, 9:11)))
seaKen(tsSub(c27))
seaKen(tsSub(c27, seas = c(1:7, 9:11)))
data(testdl)
a <- getAnnual(testdl)
library(hyfo)
data(testdl)
a <- getAnnual(testdl)
b <- getAnnual(testdl, output = 'mean', minRecords = 350)
c <- getAnnual(testdl, output = 'mean', minRecords = 365)
filePath <- system.file("extdata", "tnc.nc", package = "hyfo")
varname <- getNcdfVar(filePath)
nc <- loadNcdf(filePath, varname)
data(tgridData)
# Since the example data, has some NA values, the process will include some warning #message,
# which can be ignored in this case.
# Then we will use nc data as forecasting data, and use itself as hindcast data,
# use tgridData as observation.
biasFactor <- getBiasFactor(nc, tgridData)
biasFactor
data(testdl)
a <- testdl[[1]]
# Choose example from "1994-2-4" to "1996-1-4"
b1<- getHisEnsem(a, example = c('1995-2-4', '1996-1-4'), plot = 'cum', output = 'ggplot',
name = 1)
b2 <- getHisEnsem(a, example = c('1995-4-4', '1996-3-4'), plot = 'cum', output = 'ggplot',
name = 2)
getEnsem_comb(b1, b2)
getEnsem_comb(list = list(b1, b2), nrow = 2)
library(dynatopmodel)
data("brompton")
# Generate time series at hourly and 15 minute intervals
pe.60 <- approx.pe.ts("2012-01-01", "2012-12-31", dt=1)
plot(pe.60)
library(wq)
y <- decompTs(sfbayChla[, 's27'])
y
plot(y, nc=1, main="")
install.packages("EcoHydRology")
library(EcoHydRology)
data(OwascoInlet)
head(OwascoInlet)
hydrograph(OwascoInlet)
RainHeat(20,0.01)
install.packages("berryFunctions")
library(berryFunctions)
addAlpha("red", c(0.1, 0.3, 0.6, 1))
addAlpha(1:3)
plot(runif(1000), col=NewColors, pch=16, cex=2)
NewColors <- addAlpha(c("red","blue","yellow","green", "purple"), 0:200/200)
plot(runif(1000), col=NewColors, pch=16, cex=2)
NewColors <- addFade(c("red","blue","yellow","green", "purple"), 0:200/200)
plot(runif(1000), col=NewColors, pch=16, cex=2)
NewColors <- addFade(c("red","blue","yellow","green", "purple"), 0:200/200)
plot(runif(1000), col=NewColors, pch=16, cex=2)
NewColors <- addAlpha(c("red","blue","yellow","green", "purple"), 0:200/200)
plot(runif(1000), col=NewColors, pch=16, cex=2)
Time <- 0:100
plot(Time, unitHydrograph(n=2,  k=3, t=Time), type="l", las=1,
main="Unit Hydrograph - linear storage cascade")
install.packages("ecoval")
install.packages("ecoval")
library(ecoval)
library(utility)
library(rivernet)
library(ecoval)
hydrol <- msk.hydrol.2011.create()
plot(hydrol)
hydrol.german <- msk.hydrol.2011.create("Deutsch")
plot(hydrol.german)
install.packages("hydroTSM")
library(hydroTSM)
library(xts)
library(hydroTSM)
## Loading the SanMartino daily precipitation data (1921-1990)
data(SanMartinoPPts)
x <- SanMartinoPPts
# Amount of years in 'x' (needed for computing the average)
nyears <- length( seq(from=time(x[1]), to=time(x[length(x)]), by="years") )
## Average annual precipitation for the 70 years period.
# It is necessary to divide by the amount of years to obtain the average annual value,
# otherwise it will give the total precipitation for all the 70 years.
annualfunction(x, FUN=sum, na.rm=TRUE) / nyears
data(OwascoInlet)
head(OwascoInlet)
hydrograph(OwascoInlet)
library(EcoHydRology)
data(OwascoInlet)
head(OwascoInlet)
hydrograph(OwascoInlet)
data(OwascoInlet)
head(OwascoInlet)
hydrograph(OwascoInlet)
library(xts)
library(hydroTSM)
SanMartinoPPts
View(x)
######################
## Ex1: Loading the DAILY precipitation, maximum and minimum air temperature at
##      station Maquehue Temuco Ad (Chile)
data(MaquehueTemuco)
pcp <- MaquehueTemuco[, 1]
tmx <- MaquehueTemuco[, 2]
tmn <- MaquehueTemuco[, 3]
## Plotting the climograph
m <- climograph(pcp=pcp, tmx=tmx, tmn=tmn, na.rm=TRUE)
## Ex1: Loading the DAILY precipitation data at SanMartino
data(SanMartinoPPts)
x <- SanMartinoPPts
## Daily to Annual
daily2annual(x, FUN=sum, na.rm=TRUE)
View(x)
install.packages("hydroTSM")
install.packages("hydroTSM")
library(xts)
library(hydroTSM)
dip("1961-01-01", "1961-12-31")
dip("01-01-1961", "30-06-1965", date.fmt= "%d-%m-%Y", out.type = "nmbr")
############
## Loading the DAILY precipitation data at SanMartino
data(SanMartinoPPts)
x <- SanMartinoPPts
## Winter (DJF) values of precipitation for each year of 'x'
dm2seasonal(x, FUN=sum, season="DJF")
View(x)
## Loading the SanMartino precipitation data
data(SanMartinoPPts)
x <- window(SanMartinoPPts, end=as.Date("1930-12-31"))
## Plotting the daily ts only, and then automatic 'x' axis
plot(x, xaxt = "n", xlab="Time")
drawTimeAxis(x)
drawTimeAxis(x)
## Loading the SanMartino precipitation data
data(SanMartinoPPts)
x <- window(SanMartinoPPts, end=as.Date("1930-12-31"))
## Plotting the daily ts only, and then automatic 'x' axis
plot(x, xaxt = "n", xlab="Time")
drawTimeAxis(x)
plot(x, xaxt = "n", xlab="Time")
plot(x, xaxt = "n", xlab="Time")
drawTimeAxis(x)
## Plotting the daily ts only, and then monthly ticks in the 'x' axis,
## with annual labels.
plot(x, xaxt = "n", xlab="Time")
drawTimeAxis(x, tick.tstep="months", lab.tstep="years")
## Plotting the daily ts only, and then monthly ticks in the 'x' axis,
## with annual labels.
plot(x, xaxt = "n", xlab="Time")
drawTimeAxis(x, tick.tstep="days", lab.tstep="month")
## Plotting the daily ts only, and then monthly ticks in the 'x' axis,
## with annual labels.
plot(x, xaxt = "n", xlab="Time")
drawTimeAxis(x, tick.tstep="days", lab.tstep="months")
plot(x, xaxt = "n", xlab="Time")
drawTimeAxis(x, tick.tstep="days", lab.tstep="days")
plot(x, xaxt = "n", xlab="Time")
drawTimeAxis(x, tick.tstep="auto", lab.tstep="days")
## with annual labels.
plot(x, xaxt = "n", xlab="Time")
drawTimeAxis(x, tick.tstep="months", lab.tstep="days")
## Plotting the daily ts only, and then monthly ticks in the 'x' axis,
## with annual labels.
plot(x, xaxt = "n", xlab="Time")
drawTimeAxis(x, tick.tstep="years", lab.tstep="days")
## Plotting the daily ts only, and then monthly ticks in the 'x' axis,
## with annual labels.
plot(x, xaxt = "n", xlab="Time")
drawTimeAxis(x, tick.tstep="years")
## Plotting the daily ts only, and then monthly ticks in the 'x' axis,
## with annual labels.
plot(x, xaxt = "n", xlab="Time")
drawTimeAxis(x, tick.tstep="days")
## Plotting the daily ts only, and then monthly ticks in the 'x' axis,
## with annual labels.
plot(x, xaxt = "n", xlab="Time")
drawTimeAxis(x, tick.tstep="months")
## Plotting the daily ts only, and then monthly ticks in the 'x' axis,
## with annual labels.
plot(x, xaxt = "n", xlab="Time")
drawTimeAxis(x, tick.tstep="years")
## Loading the SanMartino precipitation data
data(SanMartinoPPts)
x <- SanMartinoPPts
## Average amount of wet days in each month (for this example, this means days
## with precipitation larger than 0.1mm)
dwdays(x, thr=0.1)
## Loading the SanMartino precipitation data
data(SanMartinoPPts)
x <- SanMartinoPPts
## Not run:
## Days with information per year
dwi(x)
dwi(x, out.unit="mpy")
## Loading the monthly time series of precipitation within the Ebro River basin.
data(EbroPPtsMonthly)
## Months with information per year in the 9 first stations of 'EbroPPtsMonthly'
a <- dwi(EbroPPtsMonthly[,1:10], out.unit="years", dates=1)
## Before plotting the results in 'a', and just for obtaining a more interesting
## plot, 70 random numbers (between 1 and 11) are introduced in 'a'
a[sample(length(a), size = 70)] <- rep(1:11, length=70)
## Plotting the amount of months with information per year in each station
matrixplot(a, var.type="Days", main="Number of months with info per year")
## Months with information per year in the 9 first stations of 'EbroPPtsMonthly'
a <- dwi(EbroPPtsMonthly[,1:10], out.unit="years", dates=1)
library(xts)
library(hydroTSM)
data(EbroPPtsMonthly)
## Months with information per year in the 9 first stations of 'EbroPPtsMonthly'
a <- dwi(EbroPPtsMonthly[,1:10], out.unit="years", dates=1)
View(a)
View(EbroPPtsMonthly)
data(SanMartinoPPts)
x <- SanMartinoPPts
## Extracting all the values belonging to February (FEB=2)
extract(x, trgt=2)
extract(x, trgt=1970)
x  <- OcaEnOnaQts
data(OcaEnOnaQts)
## Daily Flow Duration Curve
fdc(OcaEnOnaQts)
x  <- OcaEnOnaQts
# First streamflow value (x1=42.1 m3/s)
x1 <- x[1]
# Daily FDC for 'x'
y <- fdc(x)
y1 <- y[1]
# Performing cubic (or Hermite) spline interpolation of 'x' and 'y'
f <- splinefun(y,x)
# Getting the (known) streamflow value for 'y1'
f(y1) # 42.1 m3/s, equal to the known 'x1'
## Loading daily streamflows at the station Oca en Ona (Ebro River basin, Spain) ##
data(OcaEnOnaQts)
q <- OcaEnOnaQts
# Creating a fictitious lower uncertainty band
lband <- q - min(q, na.rm=TRUE)
# Giving a fictitious upper uncertainty band
uband <- q + mean(q, na.rm=TRUE)
# Plotting the flow duration curve corresponding to 'q', with two uncertainty bounds
fdcu(q, lband, uband)
############
## Loading the monthly time series of precipitation within the Ebro River basin.
data(EbroPPtsMonthly)
## Loading the gis data
data(EbroPPgis)
## Putting the measurements of the first row of 'EbroPPtsMonthly' into their
## corresponding spatial location given by 'x.gis'
require(sp)
x.spt <- gists2spt(x.ts=EbroPPtsMonthly[1,], x.gis=EbroPPgis, X="EAST_ED50",
Y="NORTH_ED50", na.rm=FALSE, sname="ID")
spplot(x.spt, zcol="value")
## Sequence of hours between "1961-01-01 00:00" and "1961-01-10 00:00", giving the
## starting and ending date/time objects with hours and skipping the minutes (default)
hip("1961-01-01 00", "1961-12-31 00")
hip("1961-01-01 00:00", "1961-12-31 00:00", date.fmt="%Y-%m-%d %H:%M")
hip("01/01/1961 10", "02/01/1961 11", date.fmt= "%d/%m/%Y %H", out.type = "nmbr")
## Loading the gis data
data(EbroPPgis)
## Loading the shapefile with the subcatchments
data(EbroCatchmentsCHE)
## Projection for the Subcatchments file
# European Datum 50, Zone 30N
require(sp)
p4s <- CRS("+proj=utm +zone=30 +ellps=intl +units=m +no_defs")
## Selecting the first day of 'EbroPPtsMonthly' for all the stations.
# The first column of 'EbroPPtsMonthly' has the dates
x.ts <- as.numeric(EbroPPtsMonthly[1, 2:ncol(EbroPPtsMonthly)])
## Setting the name of the gauging stations
names(x.ts) <- colnames(EbroPPtsMonthly[1,2:ncol(EbroPPtsMonthly)])
##################################################
## 1) IDW interpolation and plot
## Probably you will need to resize your window
## Not run:
x.idw <- hydrokrige(x.ts= x.ts, x.gis=EbroPPgis,
X="EAST_ED50", Y="NORTH_ED50", sname="ID", bname="CHE_BASIN_NAME",
type= "both",
subcatchments= EbroCatchmentsCHE,
cell.size= 3000,
ColorRamp= "Precipitation",
main= "IDW Precipitation on the Ebro")
## End(Not run)
data(EbroPPtsMonthly)
## Visualizing the correlation among the monthly precipitation values
## of the first 3 gauging stations in 'EbroPPtsMonthly'.
## The first column of 'EbroPPtsMonthly' has the dates.
hydropairs(EbroPPtsMonthly[,2:4])
## Loading daily streamflows at the station Oca en Ona (Ebro River basin, Spain) ##
data(OcaEnOnaQts)
## 3 ts, 3 boxplots and 3 histograms
hydroplot(OcaEnOnaQts, FUN=mean, ylab= "Q", var.unit = "m3/s")
## Not run:
# Loading the DEM
require(rgdal)
data(EbroDEM1000m)
dem <- EbroDEM1000m
# Plotting the DEM
require(sp)
spplot(dem, scales=list(draw=TRUE, y=list(rot=90)))
# Computing and plotting the hypsometric curve
hypsometric(dem)
## Loading daily streamflows at the station Oca en Ona (Ebro River basin, Spain) ##
data(OcaEnOnaQts)
x <- OcaEnOnaQts
## Computing xmin and the range of 'x'
xmin <- min(x, na.rm=TRUE)
r <- diff(range(x, na.rm=TRUE))
## Standarized variable
s <- stdx(x)
## Inverse of the standarized variable
si <- istdx(s, xmin, xrange=r)
## 'si' and 'x' should be the same
summary(x-si)
## Loading daily streamflows at the station Oca en Ona (Ebro River basin, Spain) ##
data(OcaEnOnaQts)
x <- OcaEnOnaQts
## Daily to Monthly ts
m <- daily2monthly(x, FUN=mean, na.rm=FALSE)
# Plotting the monthly values
plot(m, xlab="Time")
## Plotting the annual moving average in station 'x'
lines(ma(m, win.len=12), col="blue")
## Loading the SanMartino precipitation data
data(SanMartinoPPts)
# Selecting only the values up to Dec/1960
x <- window(SanMartinoPPts, end=as.Date("1960-12-31"))
## Daily zoo to monthly zoo
m <- daily2monthly(x, FUN=sum, na.rm=TRUE)
# Creating a data.frame with monthly values per year in each column
M <- matrix(m, ncol=12, byrow=TRUE)
colnames(M) <- month.abb
rownames(M) <- unique(format(time(m), "%Y"))
# Plotting the monthly precipitation values from 1921 to 1960.
# Useful for identifying dry/wet months
matrixplot(M, ColorRamp="Precipitation",
main="Monthly precipitation at San Martino st., [mm/month]")
mip("1961-01-01", "1961-12-31")
## Ex1: Loading the DAILY precipitation data at SanMartino
data(SanMartinoPPts)
x <- SanMartinoPPts
## Daily to Annual
daily2annual(x, FUN=sum, na.rm=TRUE)
## Loading daily streamflows (3 years) at the station
## Oca en Ona (Ebro River basin, Spain)
data(OcaEnOnaQts)
x <- OcaEnOnaQts
## Mean monthly streamflows at station 'x'
monthlyfunction(x, FUN=mean, na.rm=TRUE)
## Loading the monthly time series of precipitation within the Ebro River basin.
data(EbroPPtsMonthly)
## Loading the gis data
data(EbroPPgis)
## Loading the shapefile with the subcatchments
data(EbroCatchmentsCHE)
## Projection for the Subcatchments file
require(sp)
p4s <- CRS("+proj=utm +zone=30 +ellps=intl +units=m +no_defs")
## Field name in 'x.gis' with the ID of the station
sname <- "ID"
## Field name in 'x.gis'with the name of the catchment to which each station belongs
bname <- "CHE_BASIN_NAME"
## Field name in 'x.gis' with the Easting spatial coordinate
X     <- "EAST_ED50"
## Field name in 'x.gis' with the Northing spatial coordinate
Y     <- "NORTH_ED50"
## Field name in 'x.gis' with the Elevation
elevation <- "ELEVATION"
#######
## Selecting Jan/1961 (first row) of 'EbroPPtsMonthly' in all the stations
x.ts <- as.numeric(EbroPPtsMonthly[1, 2:ncol(EbroPPtsMonthly)])
## Setting the name of the stations
names(x.ts) <- colnames(EbroPPtsMonthly[ ,2:ncol(EbroPPtsMonthly)])
########
## IDW interpolation and plot (Jan/61)
x.idw <- hydrokrige(x.ts= x.ts, x.gis=EbroPPgis,
X=X, Y=Y, sname=sname, bname=bname, elevation=elevation,
type= "cells", #'both'
subcatchments= EbroCatchmentsCHE, p4s= p4s,
cell.size= 3000, nmax= 50,
ColorRamp= "Precipitation",
main= "IDW Mean Annual Precipitation on the Ebro, Jan/1961")
## Storing the interpolated values
x.idw@data["Jan1961"]   <- x.idw@data["var1.pred"]
x.idw@data["var1.pred"] <- NULL
x.idw@data["var1.var"]  <- NULL
## Selecting the Jul/1961 of 'EbroPPtsMonthly' for all the stations
x.ts <- as.numeric(EbroPPtsMonthly[7, 2:ncol(EbroPPtsMonthly)])
## Setting the name of the stations
names(x.ts) <- colnames(EbroPPtsMonthly[ , 2:ncol(EbroPPtsMonthly)])
## Not run:
## IDW interpolation and plot (Jul/1961)
x.idw2 <- hydrokrige(x.ts= x.ts, x.gis=EbroPPgis,
X=X, Y=Y, sname=sname, bname=bname, elevation=elevation,
type= "cells", #'both'
subcatchments= EbroCatchmentsCHE, p4s= p4s,
cell.size= 3000, nmax= 50,
ColorRamp= "Precipitation",
main= "IDW Mean Annual Precipitation on the Ebro, Jul/1961")
# Adding the interpolated value for Jul/1961 to 'x.idw'
x.idw@data["Jul1961"] <- x.idw2@data["var1.pred"]
## Plotting in the same graph the 2 interpolated fields
mspplot(x=x.idw,
subcatchments=EbroCatchmentsCHE,
IDvar=NULL, p4s,
col.nintv=50,
main="IDW Monthly Precipitation on the Ebro River basin, [mm]",
stations.plot=FALSE,
arrow.plot=TRUE, arrow.offset=c(900000,4750000), arrow.scale=20000,
scalebar.plot=TRUE, sb.offset=c(400000,4480000), sb.scale=100000)
## End(Not run)
install.packages(hydroGOF)
install.packages("hydroGOF")
library(hydroGOF)
# Looking at the difference between r2 and br2 for a case with systematic
# over-prediction of observed values
obs <- 1:10
sim1 <- 2*obs + 5
sim2 <- 2*obs + 25
# The coefficient of determination is equal to 1 even if there is no one single
# simulated value equal to its corresponding observed counterpart
r2 <- (cor(sim1, obs, method="pearson"))^2 # r2=1
# 'br2' effectively penalises the systematic over-estimation
br2(sim1, obs) # br2 = 0.3684211
br2(sim2, obs) # br2 = 0.1794872
ggof(sim1, obs)
ggof(sim2, obs)
obs <- 1:10
sim <- 2:11
## Not run:
ggof(sim, obs)
## End(Not run)
sim <- 1:10
obs <- 1:10
gof(sim, obs)
ggof(sim, obs)
gof(sim, obs)
# Example1: basic ideal case
obs <- 1:10
sim <- 1:10
KGE(sim, obs)
obs <- 1:10
sim <- 2:11
KGE(sim, obs)
sim <- 2:11
obs <- 1:10
## Not run:
plot2(sim, obs)
# Loading daily streamflows of the Ega River (Spain), from 1961 to 1970
data(EgaEnEstellaQts)
obs <- EgaEnEstellaQts
# Selecting only the daily values belonging to the year 1961
obs <- window(obs, end=as.Date("1961-12-31"))
# Generating the lower and upper uncertainty bounds
lband <- obs - 5
uband <- obs + 5
## Not run:
plotbands(obs, lband, uband)
# Loading daily streamflows of the Ega River (Spain), from 1961 to 1970
data(EgaEnEstellaQts)
obs <- EgaEnEstellaQts
# Selecting only the daily values belonging to the year 1961
obs <- window(obs, end=as.Date("1961-12-31"))
# Generating the lower and upper uncertainty bounds
lband <- obs - 5
uband <- obs + 5
## Not run:
plot(obs, type="n")
plotbandsonly(lband, uband)
points(obs, col="blue", cex=0.6, type="o")
q()
