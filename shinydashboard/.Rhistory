shiny::runApp('test1')
runApp('test1')
runApp('test1')
runApp('test1')
runApp('test1')
runApp('test1')
runApp('test1')
runApp('test1')
runApp('test1')
runApp('test1')
runApp('test1')
runApp('test1')
shiny::runApp('test1')
runApp('test1')
help("data.frame")
data.frame(column1,column2,row.names = "form message")
column1 <- c(1,2)
column2 <- c(3,4)
data.frame(column1,column2,row.names = "form message")
rownames<-("form","message")
rownames<-c("form","message")
data.frame(column1,column2,row.names = rownames)
runApp('test1')
runApp('test1')
runApp('test1')
runApp('test1')
runApp('test1')
runApp('test1')
runApp('test1')
runApp('test1')
runApp('test1')
runApp('test1')
runApp('test1')
runApp('test1')
runApp('test1')
runApp('test1')
shiny::runApp('test1')
runApp('test1')
runApp('test1')
runApp('test1')
runApp('test1')
runApp('test1')
install.packages("lattice")
runApp('test1')
help("list")
runApp('test1')
install.packages("rCharts")
library(devtools)
install_github('recharts', 'taiyun')
install_github('taiyun/recharts')
install_github('ramnathv/rCharts')
install_github('ramnathv/rCharts')
runApp('test1')
runApp('test1')
help("data.frame")
help("showOutput")
runApp('test1')
help("renderChart")
help("as.data.frame")
help("subset")
runApp('test1')
HairEyeColor
runApp('test1')
help("nPlot")
library(shiny)
library(lattice)
library(shinydashboard)
library(rCharts)
help("nPlot")
help("??nPlot")
help(nPlot)
help("nPlot")
help("nPlot")
runApp('test1')
help("rCharts")
help(rCharts)
runApp('test1')
library(shiny)
help(showOutput)
runApp('test1')
shiny::runApp('test1')
runApp('test1')
install.packages("DT")
runApp('test1')
runApp('test1')
install.packages("networkD3 ")
install.packages("networkD3")
runApp('test1')
runApp('test1')
help(forceNetwork)
runApp('test1')
data(MisLinks)
View(MisNodes)
runApp('test1')
runApp()
runApp()
runApp('test1')
runApp('test1')
runApp('test1')
runApp('test1')
runApp('test1')
runApp('test1')
runApp('test1')
shiny::runApp('test1')
runApp('test1')
runApp('test1')
runApp('test1')
runApp('test1')
runApp('test1')
shiny::runApp('test1')
runApp('E:/R_project/222/map')
install.packages("RMySQL")
library(RMySQL)
library(DBI)
library(RMySQL)
mySQLcon <- dbConnect(RMySQL::MySQL(),
dbname = "customerdata",
host = "customerdata.aaa.eu-central-1.rds.amazonaws.com",
user = "root", password = "1234")
mySQLcon <- dbConnect(RMySQL::MySQL(),
dbname = "ssm_crud",
host = "customerdata.aaa.eu-central-1.rds.amazonaws.com",
user = "root", password = "1234")
mySQLcon <- dbConnect(RMySQL::MySQL(),
dbname = "ssm_crud",
host = "localhost:3306",
user = "root", password = "1234")
mySQLcon <- dbConnect(RMySQL::MySQL(),
dbname = "ssm_crud",
host="127.0.0.1",port=3306,
user = "root", password = "1234")
summary(mySQLcon)
dbGetInfo(mySQLcon)
dbDisconnect(mySQLcon)
mySQLcon <- dbConnect(RMySQL::MySQL(),
dbname = "ssm_crud",
host="localhost",port=3306,
user = "root", password = "1234")
summary(mySQLcon)
dbDisconnect(mySQLcon)
mySQLcon <- dbConnect(RMySQL::MySQL(),
dbname = "ssm_crud",
host="localhost",
user = "root", password = "1234")
summary(mySQLcon)
dbGetInfo(mySQLcon)
dbListTables(mySQLcon
)
dbDisconnect(mySQLcon)
mySQLcon <- dbConnect(RMySQL::MySQL(),
dbname = "ssm_crud",
host="localhost",
user = "root", password = "1234")
mySQLtable <- "customerData"
mySQLquery <- sprintf("SELECT * FROM %s", mySQLtable)
mySQLdata <- dbGetQuery(mySQLcon, mySQLquery)
write.csv(mySQLdata, file = "data/customerDF.csv")
dbDisconnect(mySQLcon)
mySQLcon <- dbConnect(RMySQL::MySQL(),
dbname = "customerdata",
host="localhost",
user = "root", password = "1234")
mySQLtable <- "customerData"
mySQLquery <- sprintf("SELECT * FROM %s", mySQLtable)
mySQLdata <- dbGetQuery(mySQLcon, mySQLquery)
write.csv(mySQLdata, file = "data/customerDF.csv")
mySQLtable <- "ccc"
mySQLquery <- sprintf("SELECT * FROM %s", mySQLtable)
mySQLdata <- dbGetQuery(mySQLcon, mySQLquery)
write.csv(mySQLdata, file = "data/customerDF.csv")
write.csv(mySQLdata, file = "data/customerDF.csv")
dbDisconnect(mySQLcon)
mySQLcon <- dbConnect(RMySQL::MySQL(),
dbname = "customerdata",
host="localhost",
user = "root", password = "1234")
dbListTable(mySQLcon)
dbListTables(mySQLcon)
dbListTables(mySQLcon)
mySQLtable <- "customerData"
mySQLquery <- sprintf("SELECT * FROM %s", mySQLtable)
mySQLdata <- dbGetQuery(mySQLcon, mySQLquery)
write.csv(mySQLdata, file = "data/customerDF.csv")
mySQLtable <- "customerData"
mySQLquery <- sprintf("SELECT * FROM %s", mySQLtable)
mySQLdata <- dbGetQuery(mySQLcon, mySQLquery)
write.csv(mySQLdata, file = "data/customerDF.csv")
write.csv(mySQLdata, file = "data/customerDF.csv")
dbDisconnect(mySQLcon)
mySQLcon <- dbConnect(RMySQL::MySQL(),
dbname = "customerdata",
host="localhost",
user = "root", password = "1234")
mySQLtable <- "customerData"
mySQLquery <- sprintf("SELECT * FROM %s", mySQLtable)
mySQLdata <- dbGetQuery(mySQLcon, mySQLquery)
write.csv(mySQLdata, file = "data/customerDF.csv")
dbDisconnect(mySQLcon)
mySQLcon <- dbConnect(RMySQL::MySQL(),
dbname = "ssm_crud",
host="localhost",
user = "root", password = "1234")
mySQLtable <- "tbl_emp"
mySQLquery <- sprintf("SELECT * FROM %s", mySQLtable)
mySQLdata <- dbGetQuery(mySQLcon, mySQLquery)
write.csv(mySQLdata, file = "data/customerDF.csv")
install.packages(c("Rcpp", "shinydashboard", "stringi"))
install.packages("caret")
library(caret)
library(caret)
data(iris)
dataset <- iris
View(dataset)
help(dataset)
help(dataset)
help(createDataPartition)
View(dataset)
View(dataset)
dim(dataset)
validation_index <- createDataPartition(dataset$Species, p=0.80, list=FALSE)
validation <- dataset[-validation_index,]
dataset <- dataset[validation_index,]
dim(dataset)
percentage <- prop.table(table(dataset$Species)) * 100
cbind(freq=table(dataset$Species), percentage=percentage)
help(table)
par(mfrow=c(1,4))
help(featurePlot)
help("list")
help(list)
x <- dataset[,1:4]
y <- dataset[,5]
x <- dataset[,1:4]
for(i in 1:4) {
boxplot(x[,i], main=names(iris)[i])
}
featurePlot(x=x, y=y, plot="density", scales=scales)
featurePlot(x=x, y=y, plot="density")
scales <- list(x=list(relation="free"), y=list(relation="free"))
featurePlot(x=x, y=y, plot="density",scales=scales)
# a) linear algorithms
set.seed(7)
fit.lda <- train(Species~., data=dataset, method="lda", metric=metric, trControl=control)
# b) nonlinear algorithms
# CART
set.seed(7)
fit.cart <- train(Species~., data=dataset, method="rpart", metric=metric, trControl=control)
# kNN
set.seed(7)
fit.knn <- train(Species~., data=dataset, method="knn", metric=metric, trControl=control)
# c) advanced algorithms
# SVM
set.seed(7)
fit.svm <- train(Species~., data=dataset, method="svmRadial", metric=metric, trControl=control)
# Random Forest
set.seed(7)
fit.rf <- train(Species~., data=dataset, method="rf", metric=metric, trControl=control)
control <- trainControl(method="cv", number=10)
metric <- "Accuracy"
# a) linear algorithms
set.seed(7)
fit.lda <- train(Species~., data=dataset, method="lda", metric=metric, trControl=control)
# b) nonlinear algorithms
# CART
set.seed(7)
fit.cart <- train(Species~., data=dataset, method="rpart", metric=metric, trControl=control)
# kNN
set.seed(7)
fit.knn <- train(Species~., data=dataset, method="knn", metric=metric, trControl=control)
# c) advanced algorithms
# SVM
set.seed(7)
fit.svm <- train(Species~., data=dataset, method="svmRadial", metric=metric, trControl=control)
# Random Forest
set.seed(7)
fit.rf <- train(Species~., data=dataset, method="rf", metric=metric, trControl=control)
library(e1071)
install.packages("e1071")
library(e1071)
# a) linear algorithms
set.seed(7)
fit.lda <- train(Species~., data=dataset, method="lda", metric=metric, trControl=control)
# b) nonlinear algorithms
# CART
set.seed(7)
fit.cart <- train(Species~., data=dataset, method="rpart", metric=metric, trControl=control)
# kNN
set.seed(7)
fit.knn <- train(Species~., data=dataset, method="knn", metric=metric, trControl=control)
# c) advanced algorithms
# SVM
set.seed(7)
fit.svm <- train(Species~., data=dataset, method="svmRadial", metric=metric, trControl=control)
# Random Forest
set.seed(7)
fit.rf <- train(Species~., data=dataset, method="rf", metric=metric, trControl=control)
View(fit.cart)
View(fit.cart)
# summarize accuracy of models
results <- resamples(list(lda=fit.lda, cart=fit.cart, knn=fit.knn, svm=fit.svm, rf=fit.rf))
summary(results)
dotplot(results)
predictions <- predict(fit.lda, validation)
confusionMatrix(predictions, validation$Species)
predictions <- predict(fit.lda, validation)
confusionMatrix(predictions, validation$Species)
sales <- c(18, 33, 41, 7, 34, 35, 24, 25, 24, 21, 25, 20,
22, 31, 40, 29, 25, 21, 22, 54, 31, 25, 26, 35)
tsales <- ts(sales, start=c(2003, 1), frequency=12)
tsales
plot(tsales)
tsales.subset <- window(tsales, start=c(2003, 5), end=c(2004, 6))
tsales.subset
library(devtools)
install_github("nik01010/dashboardthemes")
shiny::runApp('test1')
runApp('test1')
runApp('test1')
runApp('test1')
runApp('test1')
runApp('test1')
runApp('test1')
shiny::runApp('test1')
attach(mtcars)
plot(wt, mpg)
abline(lm(mpg~wt))
title("Regression of MPG on Weight")
detach(mtcars)
detach(mtcars)
attach(mtcars)
plot(wt, mpg)
abline(lm(mpg~wt))
title("Regression of MPG on Weight")
detach(mtcars)
shiny::runApp('test1')
runApp('test1')
attach(mtcars)
plot(wt, mpg)
abline(lm(mpg~wt))
title("Regression of MPG on Weight")
detach(mtcars)
runApp('test1')
shiny::runApp('test1')
